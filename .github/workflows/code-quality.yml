name: Code Quality Check

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup ESLint
        if: ${{ hashFiles('**/.eslintrc*') != '' }}
        run: |
          npm install -g eslint
          echo "ESLint configuration found"

      - name: Run ESLint
        if: ${{ hashFiles('**/.eslintrc*') != '' }}
        run: |
          eslint . --ext .js,.mjs --format=stylish --ignore-path .gitignore
        continue-on-error: true

      - name: Setup Prettier
        if: ${{ hashFiles('**/.prettierrc*') != '' }}
        run: |
          npm install -g prettier
          echo "Prettier configuration found"

      - name: Check Prettier formatting
        if: ${{ hashFiles('**/.prettierrc*') != '' }}
        run: |
          prettier --check "src/**/*.{js,css,html}" "assets/**/*.{js,css,html}" "*.html"
        continue-on-error: true

  accessibility-check:
    name: Accessibility Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install accessibility tools
        run: npm install -g pa11y-ci

      - name: Build project
        run: |
          npm ci
          chmod +x build.sh
          ./build.sh

      - name: Start local server
        run: |
          npx serve www -s -l 3000 &
          sleep 5

      - name: Run accessibility tests
        run: |
          pa11y-ci --sitemap http://localhost:3000/sitemap.xml --reporter json
        continue-on-error: true

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build project
        run: |
          npm ci
          chmod +x build.sh
          ./build.sh

      - name: Analyze bundle size
        run: |
          echo "Analyzing bundle sizes..."

          # 分析 JS 文件大小
          echo "## JavaScript Files:" >> $GITHUB_STEP_SUMMARY
          find www -name "*.js" -not -path "*/node_modules/*" -exec du -h {} + | sort -hr | head -10 >> $GITHUB_STEP_SUMMARY

          # 分析 CSS 文件大小
          echo "## CSS Files:" >> $GITHUB_STEP_SUMMARY
          find www -name "*.css" -not -path "*/node_modules/*" -exec du -h {} + | sort -hr | head -10 >> $GITHUB_STEP_SUMMARY

          # 分析总体大小
          total_size=$(du -sh www | cut -f1)
          echo "## Total Size: $total_size" >> $GITHUB_STEP_SUMMARY

      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: '.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
        continue-on-error: true

  html-validation:
    name: HTML Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install HTML validator
        run: npm install -g html-validate

      - name: Validate HTML files
        run: |
          echo "Validating HTML files..."

          for html_file in *.html; do
            if [ -f "$html_file" ]; then
              echo "Validating $html_file..."
              html-validate "$html_file" || echo "HTML validation issues found in $html_file"
            fi
          done
        continue-on-error: true

      - name: Check HTML best practices
        run: |
          echo "Checking HTML best practices..."

          # 检查 DOCTYPE
          for html_file in *.html; do
            if [ -f "$html_file" ]; then
              if ! grep -q "<!DOCTYPE html>" "$html_file"; then
                echo "❌ $html_file missing DOCTYPE"
              fi

              # 检查 lang 属性
              if ! grep -q 'lang=' "$html_file"; then
                echo "❌ $html_file missing lang attribute"
              fi

              # 检查 viewport meta 标签
              if ! grep -q "viewport" "$html_file"; then
                echo "⚠️ $html_file missing viewport meta tag"
              fi

              # 检查 title 标签
              if ! grep -q "<title>" "$html_file"; then
                echo "❌ $html_file missing title tag"
              fi

              # 检查 meta description
              if ! grep -q 'name="description"' "$html_file"; then
                echo "⚠️ $html_file missing meta description"
              fi
            fi
          done